swagger: '2.0'
info:
  version: '1.0.0'
  title: Sample Application Flow OAuth2 Project
  description: This is an example of using OAuth2 Application Flow in a specification to describe security to your API.

  
# Under securityDefinitions we declare which security schemes can be used.
# These definitions do not affect to the operations, but can be applied
# using the 'security' key at the global level or the operation level.
# In this sample, we'll see how to apply the security definition globally,
# and override it at the operation level.
#
# Note that for Application Flow, you must provide the Token URL.
#securityDefinitions:
#  application:
#    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
#    tokenUrl: http://example.com/oauth/token
#    flow: application
#    scopes:
#      write: allows modifying resources
#      read: allows reading resources

# Here we apply the security flow called 'application' globally to all the operations in the spec.
# This security scheme is defined above in the
# 'securityDefinitions' section.
# Global security can be overridden an operation level as seen in the example below
#security:
#  - application:
#    - read
#    - write

basePath: /api

paths:
  /account/login:
    post:
      operationId: app.api.auth.login
      parameters:
        - name: json_post
          description: JSON data containing user email and password as well as boolean value to remember login on next visit (default=False).
          in: query
          type: string
          required: true
      tags:
        - User authentication
      summary: Log in to the server as existing user in a database
      description: TODO Return login token. Function arguments = (email, password, remember=False). If remember is set to True user log in status will be remembered.
      responses:
        200:
          description: Successfully logged in
          schema:
            type: array
            items:
              properties:
                detail:
                  type: string
                status:
                  type: string
                title:
                  type: string
                timepstamp:
                  type: string
  /account/register:
    post:
      operationId: app.api.account.register
      parameters:
        - name: json_post
          description: JSON data containing user's username, email and password to register in database.
          in: query
          type: string
          required: true
      tags:
        - User authentication
      summary: Create new user in the database
      description: Create a new user provided valid information. Function arguments = (username, email, password). Passwords are hashed using bcrypt before storing in database.
      responses:
        200:
          description: User successfully created in the database.
          schema:
            type: array
            items:
              properties:
                detail:
                  type: string
                status:
                  type: string
                title:
                  type: string
                timestamp:
                  type: string
        412:
          description: User with that username or email already exists in the database.
          schema:
            type: array
            items:
              properties:
                detail:
                  type: string
                status:
                  type: string
                title:
                  type: string
                taken:
                  type: string
                timestamp:
                  type: string
